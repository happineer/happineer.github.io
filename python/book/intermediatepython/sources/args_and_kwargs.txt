\*args and \*\*kwargs 변수
---------------------

대부분의 python을 처음 접하는 프로그래머들이 \*args 와 \*\*kwargs 라는
python 의 magic variables 에 대해서 이해하는데 어려움을 겪는것을 그동안 쭉 봐왔다.
이 변수들은 과연 무엇일까? 
일단, 말해주고 싶은 부분은 반드시 꼭 \*args 와 \*\*kwargs 을 사용해야
하는 것은 아니라는 것이다. ``*`` (asterisk) 만이 반드시 필요하다.
다시 말하면 \*args 와 \*\*kwargs 라고 사용하지 않고 \*var and \*\*vars 라고
사용할 수도 있다. \*args and \*\*kwargs 라고 적은것은 일종의 규약(convention)
이다. 자 이제 \*args 에 대해서 먼저 알아보자.


\*args 의 사용법
^^^^^^^^^^^^^^^

\*args 와 \*\*kwargs 는 대부분 함수를 정의할때 사용된다.
\*args 와 \*\*kwargs 변수를 통해 함수에 많은 갯수의 인자를 전달할 수 있다.
args, kwargs 변수들이 의미하는 것은 사용자가 몇개의 인자를 
함수로 전달 할 것 인지 미리 알수 없을 때, 이러한 경우에 \*args, \*\*kwargs변수를
사용하면 된다는 것을 의미한다.
여기서 \*args 인자를 사용하여 **non-keyworded** list 를 함수로 전달하였다.
정확한 이해를 돕기위해 아래의 예제를 살펴보자.

.. code:: python

    def test_var_args(f_arg, *argv):
        print "first normal arg:", f_arg
        for arg in argv:
            print "another arg through *argv :", arg

    test_var_args('yasoob','python','eggs','test')

이 코드는 아래의 결과를 만들어낸다.

.. code:: python

    first normal arg: yasoob
    another arg through *argv : python
    another arg through *argv : eggs
    another arg through *argv : test


앞선 설명에서 이해가 어렵고 혼란스러웠던 부분이 이번 예제를 통해 확실히 이해되길 바란다.
이해가 될 것이라 생각한다. 다음으로 \*\*kwargs 에 대해서 알아보자.

\*\*kwargs 사용법
^^^^^^^^^^^^^^^^^^^

\*\*kwargs 함수 인자는 **keyworded** 갯수 만큼의 인자를 함수로 전달하는데 사용된다.
함수 내에서 **named arguments** 변수들을 처리하기 위해서는 \*\*kwargs 변수를 
사용해야만 한다. 아래의 예제를 보자.

.. code:: python

    def greet_me(**kwargs):
        if kwargs is not None:
            for key, value in kwargs.iteritems():
                print "%s == %s" %(key,value)

    >>> greet_me(name="yasoob")
    name == yasoob

위 예제를 보면, 함수내에서 keyworded argument list 를 어떻게 처리하는지
알 수 있다. 이것은 \*\*kwargs 변수를 사용하는 기본적인 방법이며,
위 예제에서 \*\*kwargs 변수가 얼마나 유용한지 알 수 있었다.
자 이제 리스트 또는 사전형 변수를 인자로 해서 함수를 호출할때, 
\*args 그리고 \*\*kwargs 변수를 어떻게 사용하는지 알아보자.

\*args and \*\*kwargs 변수를 사용해서 함수 호출하기
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

이번에는 \*args 와 \*\*kwargs 변수를 이용하여 함수 호출하는 방법에 대해
알아보겠다. 아래의 간단한 함수를 살펴보자.

.. code:: python

    def test_args_kwargs(arg1, arg2, arg3):
        print "arg1:", arg1
        print "arg2:", arg2
        print "arg3:", arg3


\*args 와 \*\*kwargs 를 이용하여 함수에 인자를 전달 할 수 있다.
어떻게 하는지 아래의 python 코드를 보자.

.. code:: python

    # first with *args
    >>> args = ("two", 3, 5)
    >>> test_args_kwargs(*args)
    arg1: two
    arg2: 3
    arg3: 5

    # now with **kwargs:
    >>> kwargs = {"arg3":3, "arg2":"two", "arg1":5}
    >>> test_args_kwargs(**kwargs)
    arg1: 5
    arg2: two
    arg3: 3

**\*args \*\*kwargs 변수 사용의 순서와 formal args**

만약 3가지 타입의 인자를 모두 사용하고 싶다면, 아래와 같은 순서로 사용해야 한다.

.. code:: python

    some_func(fargs,*args,**kwargs)


언제 이것들을 사용하나요?
^^^^^^^^^^^^^^^^^

이 질문은 여러분의 요구사항에 전적으로 의존한다.
대부분의 경우 함수 decorators(이것은 다른 chapter에서 논의 할 것이다)를 만들 때 사용한다.
게다가 monkey patching 에도 사용되어진다.
Monkey patching 은 runtime 에 code를 수정하는 것을 의미한다.
``get_info`` 라는 함수를 내장하는 class가 있다고 가정해보자. 
``get_info`` 함수는 API를 호출하고 결과 data를 반환하는 함수다. 
만약 이 API를 test하고 싶다면, API call 하지 않고, test 값을 return 하면 된다.
아래의 예제를 살펴보자

.. code:: python

    import someclass

    def get_info(self, *args):
        return "Test data"

    someclass.get_info = get_info # change api at runtime

여러분 또한 다양한 use case를 생각할 수 있다고 확신합니다.
