\_\_slots\_\_ Magic
-------------------

Python에서 모든 클래스는 instance 속성들을 가지고 있다.
python 은 object의 instance 속성을 저장하기 위해 기본적으로 사전(dict)자료형을 사용한다.
이것은 runtime에 임의의 새로운 속성을 setting 할 때, 굉장히 도움이 된다.

그러나, 이미 속성을 알고있는 small 클래스들은, 이것이 bottleneck 이 될 수 있습니다.
``dict`` 는 RAM을 많이 낭비합니다. python 에서는 객체 생성 시
객체의 모든 속성을 저장하기 위해 일정량의 메모리를 할당할 수 없습니다.
그래서 만약 여러분이 많은 object를 생성(수천 수백만 정도을 의미합니다) 하면
RAM 을 많이 잡아먹게 됩니다. 하지만 안타까워 할 필요는 없습니다.
이러한 이슈를 회피하기 위한 방법이 있습니다. Python 에서 객체 생성 시
사전형(dict)을 사용하지 않도록 설정하는 ``__slot__`` 의 사용법이 있습니다.
그리고, 속성의 고정된 set 에 대해서 공간을 할당합니다.
아래 ``__slot__`` 을 사용했을 때와 사용하지 않았을 때의 예제가 있습니다.

**Without** ``__slots__``:

.. code:: python

    class MyClass(object):
        def __init__(name, identifier):
            self.name = name
            self.identifier = identifier
            self.set_up()
        # ...

**With** ``__slots__``:

.. code:: python

    class MyClass(object):
        __slots__ = ['name', 'identifier']
        def __init__(name, identifier):
            self.name = name
            self.identifier = identifier
            self.set_up()
        # ...


``__slot__`` 을 사용한 두번째 코드는 RAM 의 부담을 줄여줍니다.
몇몇 사람들은 이러한 방법을 통해 거의 40~50% 의 RAM 부담을 줄일수 있다는 것을
알게 되었습니다.

여러분은 아마도 PyPy 에 이것을 적용하고 싶을수도 있습니다.
PyPy는 기본적으로 이 모든 optimizations 을 적용하고 있습니다.
