Classes
-------

Classes are the core of Python. They give us a lot of power but it is
really easy to misuse this power. In this section I will share some
obscure tricks and caveats related to ``classes`` in Python. Let's get
going!

Class 는 Python의 핵심이다. 클래스는 막강한 힘을 가져다 주기도하지만,
잘못 사용하기도 매우 쉽다. 이번 장에서는 몇가지 ``classes`` 와 관련된 
애매모호한 트릭과 주의사항에 대해서 공유하고자 한다.
시작해보자.


1. Instance & Class variables
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Most beginners and even some advanced Python programmers do not
understand the distinction between instance and class variables. Their
lack of understanding forces them to use these different types of
variables incorrectly. Let's understand them.

대부분의 초심자 그리고 심지어 몇몇 고급 python programmer 들도
instance 와 class 변수의 차이를 이해하지 못한다. 그들의 이해부족은
우리로 하여금 이러한 변수의 차이점을 잘못 사용하도록 한다.
이들을 이해해보자.

The basic difference is:

기본적인 차이는 아래와 같다.

-  Instance variables are for data which is unique to every object
-  Class variables are for data shared between different instances of a
   class

-  instance 변수는 모든 객체에서 유일한 어떤 data를 위해 존재한다.
-  클래스 변수는 클래스의 서로다른 instance 사이에 data를 공유하기 위해 존재한다.

Let's take a look at an example:

아래 예제를 살펴보자.

.. code:: python

    class Cal(object):
        # pi is a class variable
        pi = 3.142

        def __init__(self, radius):
            # self.radius is an instance variable
            self.radius = radius

        def area(self):
            return self.pi * (self.radius ** 2)

    a = Cal(32)
    a.area()
    # Output: 3217.408
    a.pi
    # Output: 3.142
    a.pi = 43
    a.pi
    # Output: 43

    b = Cal(44)
    b.area()
    # Output: 6082.912
    b.pi
    # Output: 3.142
    b.pi = 50
    b.pi
    # Output: 50

There are not many issues while using mutable class variables. This is
the major reason due to which beginners do not try to learn more about
this subject because everything works! If you also believe that instance
and class variables can not cause any problem if used incorrectly then
check the next example.

변경 가능한 클래스 변수를 사용하는데에 별다른 이슈는 없다.
모든것이 잘 동작하는 것이  초심자가 이 주제에 대해서 더 배우려고 하지 않는
않는 주된 이유이다. 만약 당신 또한 instance 와 클래스 변수를 제대로 사용하지 않았음에도
아무런 문제가 없다고 믿는다면, 다음의 예제를 확인해 보자.


.. code:: python

    class SuperClass(object):
        superpowers = []

        def __init__(self, name):
            self.name = name

        def add_superpower(self, power):
            self.superpowers.append(power)

    foo = SuperClass('foo')
    bar = SuperClass('bar')
    foo.name
    # Output: 'foo'

    bar.name
    # Output: 'bar'

    foo.add_superpower('fly')
    bar.superpowers
    # Output: ['fly']

    foo.superpowers
    # Output: ['fly']

That is the beauty of the wrong usage of mutable class variables. To
make your code safe against this kind of surprise attacks then make sure
that you do not use mutable class variables. You may use them only if
you know what you are doing.

변경가능한 클래스 변수의 잘못된 사용을 보여주는 훌륭한 예제이다.
예상치 못한 종류의 공격에 대해서 안전한 코드를 만들기 위해
변경가능한 클래스 변수를 사용하지 말것을 확신해라.
당신은 클래스 변수가 어떻게 동작하는지 명확하게 안다면,
그때 이것을 사용하는 것을 좋을 것이다.


2. New style classes
^^^^^^^^^^^^^^^^^^^^

New style classes were introduced in Python 2.1 but a lot of people do
not know about them even now! It is so because Python also supports old
style classes just to maintain backward compatibility. I have said a lot
about new and old but I have not told you about the difference. Well the
major difference is that:

새로운 스타일의 클래스가 python 2.1 에서 소개되었다. 그러나 많은 사람들은
이것에 대해서 알지못한다. 지금까지도...
python은 단지 하위 호환성을 유지하기 위해 옛날 스타일의 클래스를 지원하고 있다.
나는 새로운것과 이전방식에 대해서 쭉 얘기했지만, 나는 그 차이점에 대해서는
말한적이 없다. 음.. 주된 차이점은 아래와 같다.

-  Old base classes do not inherit from anything
-  New style base classes inherit from ``object``

-  옛날 방식의 클래스는 그 어떤것도 상속받을 수 없다.
-  새로운 방식의 클래스는 ``object`` 로부터 상속받는다.

A very basic example is:

가장 간단한 예는 아래와 같다.

.. code:: python

    class OldClass():
        def __init__(self):
            print('I am an old class')

    class NewClass(object):
        def __init__(self):
            print('I am a jazzy new class')

    old = OldClass()
    # Output: I am an old class

    new = NewClass()
    # Output: I am a jazzy new class

This inheritance from ``object`` allows new style classes to utilize
some *magic*. A major advantage is that you can employ some useful
optimizations like ``__slots__``. You can use ``super()`` and
descriptors and the likes. Bottom line? Always try to use new-style
classes.

``object`` 로부터의 상속은 새로운 스타일의 클래스가 *magic* 을 활용할 수 
있도록 한다. 중요한 장점은 당신이 ``__slot__`` 과 같은 유용한 최적화를
사용할 수 있다는 점이다. 당신은 ``super()`` 를 사용할 수 있고,
descriptor 와 the likes 를 사용할 수 있다. bottom line ??? 이건 모냐
항상 새로운 형식의 클래스를 사용하도록 하자.

**Note:** Python 3 only has new-style classes. It does not matter
whether you subclass from ``object`` or not. However it is recommended
that you still subclass from ``object``.


**Note:** python3 은 새로운 형식의 클래스만 존재한다.
당신이 ``object`` 로부터 상속받은 클래스를 만들던 말던 상관 없다.
그러나 당신이 ``object`` 로부터 상속받은 클래스는 만들도록 권유한다.

3. Magic Methods
^^^^^^^^^^^^^^^^

Python's classes are famous for their magic methods, commonly called
**dunder** (double underscore) methods. I am going to discuss a few of
them.

python의 클래스는 magic method 가 잘 알려져 있다. 일반적으로
**dunder** (double underscore) method 라고 불리운다. 
이제 이들 중 몇가지에 대해서 논의해보고자 한다.

-  ``__init__``

It is a class initializer. Whenever an instance of a class is created
its ``__init__`` method is called. For example:

이것은 클래스 초기화 method다. 클래스의 객체가 생성될 때마다
클래스의 ``__init__`` method 가 호출된다. 예를 들어보자.

.. code:: python

    class GetTest(object):
        def __init__(self):
            print('Greetings!!')
        def another_method(self):
            print('I am another method which is not'
                  ' automatically called')

    a = GetTest()
    # Output: Greetings!!

    a.another_method()
    # Output: I am another method which is not automatically
    # called

You can see that ``__init__`` is called immediately after an instance is
created. You can also pass arguments to the class during it's
initialization. Like this:

위에서 객체가 생성된 직후 ``__init__`` method 가 호출되는 것을 볼 수 있다.
아래와 같이 초기화 method 에 인자를 넘길 수 있다. 

.. code:: python

    class GetTest(object):
        def __init__(self, name):
            print('Greetings!! {0}'.format(name))
        def another_method(self):
            print('I am another method which is not'
                  ' automatically called')

    a = GetTest('yasoob')
    # Output: Greetings!! yasoob

    # Try creating an instance without the name arguments
    b = GetTest()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: __init__() takes exactly 2 arguments (1 given)

I am sure that now you understand the ``__init__`` method.

이제 ``__init__`` method 에 대해서 이해했을 것이라 확신한다.

-  ``__getitem__``

Implementing **getitem** in a class allows its instances to use the []
(indexer) operator. Here is an example:

클래스의 **getitem** 의 구현은 객체가 [](indexer) operator 를 사용할 수 있도록
한다. 아래는 예제이다.

.. code:: python

    class GetTest(object):
        def __init__(self):
            self.info = {
                'name':'Yasoob',
                'country':'Pakistan',
                'number':12345812
            }

        def __getitem__(self,i):
            return self.info[i]

    foo = OldClass()
    foo['title']
    # Output: 'Yasoob'

    foo['number']
    # Output: 36845124

Without the ``__getitem__`` method we would have got this error:

``__getitem__`` method 가 없다면 우리는 아래와 같은 에러를 직면하게 될 것이다.

.. code:: python

    >>> foo['title']

    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: 'GetTest' object has no attribute '__getitem__'

Static, Class & Abstract methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

