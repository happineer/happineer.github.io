``set`` Data Structure
----------------------

``set`` 은 매우 유용한 자료구조입니다. ``sets`` 는 list와 거의 동일하지만,
다른점이 있다면 중복된 value를 저장 할 수 없다는 점입니다. 이것은 많은 경우에
아주 유용합니다. 예를 들면, list에 중복된 값이 있는지 없는지 확인하고 싶을때입니다.
당신에게는 이를 해결 할 수 있는 2가지 방법이 있습니다.
첫번째는 아래와 같이 ``for`` 문을 사용하는 것입니다.

.. code:: python

    some_list = ['a', 'b', 'c', 'b', 'd', 'm', 'n', 'n']

    duplicates = []
    for value in some_list:
        if some_list.count(value) > 1:
            if value not in duplicates:
                duplicates.append(value)

    print(duplicates)
    # Output: ['b', 'n']

그러나, 여기 ``sets`` 을 이용한 더 간단하고 훌륭한 해결방법이 있습니다.
여러분은 아래와 같이 ``sets`` 을 이용하여 간단하게 구현할 수 있습니다.

.. code:: python

    some_list = ['a', 'b', 'c', 'b', 'd', 'm', 'n', 'n']
    duplicates = set([x for x in some_list if some_list.count(x) > 1])
    print(duplicates)
    # Output: set(['b', 'n'])

Sets 는 또한 몇가지의 다른 method를 가지고 있습니다.
아래 내용을 확인해 보겠습니다.

**Intersection**

2개의 sets 에서 교집합을 구할 수 있습니다. 예를 들면 아래와 같습니다.

.. code:: python

    valid = set(['yellow', 'red', 'blue', 'green', 'black'])
    input_set = set(['red', 'brown'])
    print(input_set.intersection(valid))
    # Output: set(['red'])

**Difference**

당신은 위 예제에서 difference method를 이용하여 invalid value를 찾아낼 수 있습니다.
예제 코드를 보겠습니다.

.. code:: python

    valid = set(['yellow', 'red', 'blue', 'green', 'black'])
    input_set = set(['red', 'brown'])
    print(input_set.difference(valid))
    # Output: set(['brown'])

당신은 또한 새로운 notation(규약)을 사용하여 새로운 ``set`` 을 생성 할 수 있습니다.

.. code:: python

    a_set = {'red', 'blue', 'green'}
    print(type(a_set))
    # Output: <type 'set'>

뿐만 아니라 추가의 몇몇 method 가 있습니다.
여러분이 공식 문서를 보고 빠르게 읽어볼 것을 추천해봅니다.
