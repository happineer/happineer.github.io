Global & Return
---------------

python에서 ``return`` 으로 끝나는 함수를 본적이 있을 것입니다. 이것이 무엇을
의미할까요? 이것은 다른 언어의 return 하고 비슷합니다. 
아래 간단한 함수를 살펴보겠습니다.

.. code:: python

    def add(value1, value2):
        return value1 + value2

    result = add(3, 5)
    print(result)
    # Output: 8

위 함수는 2개의 값을 입력값으로 받고, 합한 값을 출력하고 있습니다.
우리는 또한 아래처럼 수행할 수도 있습니다.

.. code:: python

    def add(value1,value2):
        global result
        result = value1 + value2

    add(3,5)
    print(result)
    # Output: 8

자 이제 첫번째 ``return`` 키워드를 포함하는 함수에 대해서 살펴보겠습니다.
첫번째 함수가 수행한 것은 함수의 결과값을 함수를 호출한 측의 변수
여기서는 ``result`` 변수에 할당하는 것입니다. 대부분의 경우에
``global`` 키워드를 사용할 필요가 없을 것입니다. 그러나 ``global`` 키워드를
포함하는 또 다른 코드를 살펴봅시다. 이 함수가 수행하는 것은 global 변수인
``result`` 를 만드는 것 입니다. 여기서 global 이 의미하는 것은 무엇일까요?
global 변수는 함수 외부에서도 접근이 가능하다는 것을 의미합니다.
global 변수에 대한 아래 예제를 살펴보겠습니다.

.. code:: python

    # first without the global variable
    # 첫번째 : global 변수 없는 경우
    def add(value1, value2):
        result = value1 + value2

    add(2, 4)
    print(result)

    # exception 이 발생하였습니다. 왜 그럴까요?
    # python interpreter는 result 라는 이름의 변수를 가지고 있지 않다. 
    # 라고 말하고 있습니다. 이러한 exception이 발생한 이유는
    # result 변수는 변수가 생성된 함수 내부에서만 접근이 가능하기
    # 때문입니다. 이는 global 변수가 아닙니다.
    Traceback (most recent call last):
      File "", line 1, in 
        result
    NameError: name 'result' is not defined

    # result 변수를 global 으로 만든 후, 동일한 코드를
    # 다시 수행해 보겠습니다.
    def add(value1, value2):
        global result
        result = value1 + value2

    add(2, 4)
    result
    6

다행스럽게도 2번째 수행에는 예상했던것과 같이 Error가 발생하지 않습니다.
실용적인 프로그래밍에서는 ``global`` 키워드를 지양해야만 합니다.
원치 않았던 변수가 global 영역에 할당되어 코드해석이 어려워질 수 있습니다.

