Comprehensions
--------------

Comprehensions 는 만약 내가 python을 더이상 사용하지 않았다면 
놓치고 말았을 python 의 기능입니다. Comprehensions 은 어떤 sequences로부터
새로운 sequence 를 생성하는 일종의 생성자입니다.
python에서 3가지 타입의 Comprehensions 가 있습니다.

-  리스트 comprehensions
-  사전형 comprehensions
-  집합 comprehensions

list comprehensions 은 python2 에서 소개되었습니다.
set 과 dictionary comprehensions 은 python 3.0 에서 도입되었습니다.

우리는 하나씩 살펴볼 것입니다. 일단, ``list`` comprehensions 의
사용법을 터득하면, 다른 것들도 쉽게 사용할 수 있을 것입니다.

``list`` comprehensions
^^^^^^^^^^^^^^^^^^^^^^^

리스트 comprehensions은 리스트를 생성하는 짧고 간결한 방법을 제공합니다.
리스트 comprehensions은 없거나 하나이상의 ``for`` 또는 ``if`` 문으로 구성된 ``for`` 절을
따르는 표현식을 포함하는 대괄호로 구성됩니다. 표현식은 무엇이든 될 수 있습니다.
이는 list에 모든 타입의 object를 입력할 수 있다는 것을 의미합니다.
``if`` 와 ``for`` 문의 문맥을 나타내는 표현식을 평가한 이후에
새로운 리스트가 결과로 생성됩니다.


**Blueprint**

.. code:: python

    variable = [out_exp for out_exp in input_list if out_exp == 2]

여기 짧은 예제가 있습니다.

.. code:: python

    multiples = [i for i in range(30) if i % 3 is 0]
    print(multiples)
    # Output: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]


이것은 리스트를 빠르게 생성하는데 유용합니다. 이것은 ``filter`` 함수 대신에
사용하는 것으로도 선호됩니다. 리스트 comprehensions 은 ``for`` 문을 수행하면서
리스트에 값을 추가하여 새로운 리스트를 생성하는 함수나 method 에 리스트를
전달할 때 굉장히 빛을 발합니다.
예를 들면, 당신은 보통 이렇게 구현 할 것입니다.


.. code:: python

    squared = []
    for x in range(10):
        squared.append(x**2)

당신은 리스트 comprehensions 을 이용해서 단순화 할 수 있습니다.
예를 들면 아래와 같습니다.

.. code:: python

    squared = [x**2 for x in range(10)]

``dict`` comprehensions
^^^^^^^^^^^^^^^^^^^^^^^

사전형 comprehensions 또한 비슷한 경우에 사용됩니다.
제가 최근에 발견한 예제가 아래 있습니다.

.. code:: python

    mcase = {'a': 10, 'b': 34, 'A': 7, 'Z': 3}

    mcase_frequency = {
        k.lower(): mcase.get(k.lower(), 0) + mcase.get(k.upper(), 0)
        for k in mcase.keys()
    }

    # mcase_frequency == {'a': 17, 'z': 3, 'b': 34}

우리는 위 예제에서 내용은 같지만 대소문자가 다른 key 의 값을 조합하였습니다.
저는 개인적으로 ``dict`` comprehensions 을 많이 사용하지 않습니다.
여러분은 사전형의 key와 value 를 빠르게 교체할 수 있습니다.

.. code:: python

    {v: k for k, v in some_dict.items()}


``set`` comprehensions
^^^^^^^^^^^^^^^^^^^^^^

집합 comprehensions 역시 list comprehensions 과 매우 흡사합니다.
유일한 차이점은 ``{}`` 을 사용한다는 것입니다. 여기 예제가 있습니다.

.. code:: python

    squared = {x for x in [1, 1, 2]}
    print(squared)
    # Output: {1, 2}
