Function caching
----------------

우리는 Function caching를 통해 함수에 전달되는 인자에 의존하는 return 값을 cache 할 수 있습니다.
Function caching 을 통해 는 동일한 인자와 함께 반복적으로 호출되는 I/O 함수가 호출될 때 시간을 절약할 수 있습니다.
python 3.2 전에는 우리는 custom 구현을 했어야 했습니다. python3.2 이상에서는 
``lru_cache`` decorator 가 있어서 우리가 함수의 return값을 빠르게 cache, 또는 uncache하도록
해줍니다.

python3.2이상 버전에서 어떻게 사용하는지 그리고 이전 버전에서는 어떻게 사용하는지
알아봅시다

Python 3.2+
^^^^^^^^^^^

``lru_cache`` 를 이용하여 피보나치를 구현해봅시다.

.. code:: python

    from functools import lru_cache

    @lru_cache(maxsize=32)
    def fib(n):
        if n < 2:
            return n
        return fib(n-1) + fib(n-2)

    >>> print([fib(n) for n in range(10)])
    # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

``maxsize`` 인자는 몇 개의 최근 return 값을 cache 할 것인지
``lru_cache`` 에게 알려줍니다.

우리는 아래와 같이 손쉽게 return값을 uncache할 수 있습니다.

.. code:: python

    fib.cache_clear()

Python 2+
^^^^^^^^^

python 2 점대 버전에서는 동일한 효과를 구현하기 위한 몇가지 방법이 있습니다.
caching mechanism을 위한 임의의 타입을 만들수 있습니다. 이것은 완전히
당신의 요구사항에 의존합니다. generic cache 는 아래와 같습니다.

.. code:: python

    from functools import wraps

    def memoize(function):
        memo = {}
        @wraps(function)
        def wrapper(*args):
            if args in memo:
                return memo[args]
            else:
                rv = function(*args)
                memo[args] = rv
                return rv
        return wrapper

    @memoize
    def fibonacci(n):
        if n < 2: return n
        return fibonacci(n - 1) + fibonacci(n - 2)

    fibonacci(25)

`Here <https://www.caktusgroup.com/blog/2015/06/08/testing-client-side-applications-django-post-mortem/>` 여기
Django 에서 ``lru_cache`` 때문에 Django 에서 발생한 버그를 수정한 Caktus group 의 훌륭한 논문이 있다.

정말 흥미로운 글이다. 확인해보길 바랍니다.
