Decorators
----------

Decorators 는 python 에서 굉장히 중요한 부분입니다.
Decorator를 간단히 말하자면, 어떤 함수의 기능을 보완/수정할 수 있는 함수입니다.
Decorator 는 code를 더 간결하고 더 python틱하게 만들어줍니다.
대부분의 초심자들은 Decorator를 언제 사용해야 하는지 잘 알지 못합니다.
그래서 여기서 Decorator 가 code를 간결하게 만들 수 있는 부분에 대해 공유하고자 합니다.


먼저, decorator 를 어떻게 작성하는지 살펴보도록 합시다.

Decorator 는 이해하기 힘든 개념중 하나일 것입니다.
우리는 Decorator 의 완벽한 이해를 돕기위해 한 단계씩 진행해 보겠습니다.

Everything in python is an object:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

먼저, 아래의 python 함수를 살펴보겠습니다.

.. code:: python

    def hi(name="yasoob"):
        return "hi " + name

    print(hi())
    # output: 'hi yasoob'

    # We can even assign a function to a variable like
    greet = hi
    # We are not using parentheses here because we are not calling the function hi
    # instead we are just putting it into the greet variable. Let's try to run this

    print(greet())
    # output: 'hi yasoob'

    # Let's see what happens if we delete the old hi function!
    del hi
    print(hi())
    #outputs: NameError

    print(greet())
    #outputs: 'hi yasoob'

Defining functions within functions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

여기까지는 함수의 기본입니다. 이제 우리의 지식을 한단계 더 향상시켜 보겠습니다.
파이썬에서는 함수 내부에 함수를 정의할 수 있습니다.
아래 코드를 보세요.

.. code:: python

    def hi(name="yasoob"):
        print("now you are inside the hi() function")

        def greet():
            return "now you are in the greet() function"

        def welcome():
            return "now you are in the welcome() function"

        print(greet())
        print(welcome())
        print("now you are back in the hi() function")

    hi()
    #output:now you are inside the hi() function
    #       now you are in the greet() function
    #       now you are in the welcome() function
    #       now you are back in the hi() function

    # 이 예제는 여러분이 hi() 를 호출할 때마다, greet(), welcome() 함수가
    # 호출되는 것을 보여줍니다. 그러나, greet(), welcome() 함수는
    # hi() 함수의 외부에서는 호출할 수 없습니다.

    greet()
    #outputs: NameError: name 'greet' is not defined

그래서 이제 우리는 함수안에 함수를 정의할 수 있다는 것을 알고 있습니다.
다시 말해서, 우리는 nested 함수를 만들 수 있습니다.
자 이제 여러분은 한가지를 더 배워야만 합니다.
함수는 함수를 return 할 수도 있다는 것을요.

Returning functions from within functions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

함수 내부의 함수를 실행하는 것은 별로 필요 없습니다.
우리는 단지 함수를 output으로 return 할 수만 있으면 됩니다.

.. code:: python

    def hi(name="yasoob"):
        def greet():
            return "now you are in the greet() function"

        def welcome():
            return "now you are in the welcome() function"

        if name == "yasoob":
            return greet
        else:
            return welcome

    a = hi()
    print(a)
    #outputs: <function greet at 0x7f2143c01500>

    #This clearly shows that `a` now points to the greet() function in hi()
    #Now try this

    print(a())
    #outputs: now you are in the greet() function


코드를 다시한번 자세히 보세요. ``if/else`` 절에서 ``greet`` 와 ``welcome`` 을
return 했습니다. ``greet()`` 와 ``welcome()`` 이 아닙니다. 왜 이렇게 할까요?
그 이유는 함수뒤에 괄호를 입력하면, 함수를 바로 실행하라는 의미가 됩니다.
한편, 함수뒤에 괄호가 없으면 함수가 실행되지 않고 다른 변수에 저장할수 있는 
형태로 전달될 수 있습니다. 이해되나요? 제가 다시한번 좀 더 자세히 설명해보겠습니다.
우리가 ``a=hi()``  라고 작성을 하면, ``hi()`` 함수는 바로 실행이 되고,
name변수는 yasoob 이 default 값이기 때문에, ``greet`` 함수가 return됩니다.
만약 이것을 ``a=hi(name = "ali")`` 라고 실행했다면, ``welcome`` 함수가 return될
것입니다. 우리는 또한 ``hi()()`` 의 형태로 함수를 실행하여 아래의 문구를 출력할 수 있습니다.
*now you are in the greet() function* 

Giving a function as an argument to another function:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    def hi():
        return "hi yasoob!"

    def doSomethingBeforeHi(func):
        print("I am doing some boring work before executing hi()")
        print(func())

    doSomethingBeforeHi(hi)
    #outputs:I am doing some boring work before executing hi()
    #        hi yasoob!

자 이제 여러분은 decorators 가 무엇인지 이해하기 위한 사전 지식을 모두 습득하였습니다.
Decorators 는 여러분으로 하여금 함수의 시작과 끝에 code를 수행하도록 할 것입니다.

Writing your first decorator:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

마지막 예제에서 우리는 decorator 를 만들었습니다.
자 이제 만들었던 decorator 를 수정해보고, 좀 더 유용한 프로그램으로 바꿔보겠습니다.

.. code:: python

    def a_new_decorator(a_func):

        def wrapTheFunction():
            print("I am doing some boring work before executing a_func()")

            a_func()

            print("I am doing some boring work after executing a_func()")

        return wrapTheFunction

    def a_function_requiring_decoration():
        print("I am the function which needs some decoration to remove my foul smell")

    a_function_requiring_decoration()
    #outputs: "I am the function which needs some decoration to remove my foul smell"

    a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)
    #now a_function_requiring_decoration is wrapped by wrapTheFunction()

    a_function_requiring_decoration()
    #outputs:I am doing some boring work before executing a_function_requiring_decoration()
    #        I am the function which needs some decoration to remove my foul smell
    #        I am doing some boring work after executing a_function_requiring_decoration()


위 코드가 이해되시나요? 우리는 사전에 배운 원리/개념을 적용하였습니다.
이것이 바로 python에서 decorator 가 동작하는 원리입니다. decorator 는 함수를
감싸고 기존 함수의 동작을 수정합니다.(기존 함수 자체를 수정하진 않음)
여러분은 코드에서 왜 '@' 를 사용하지 않았는지 궁금해 할 것입니다.
'@'는 단지 decorator 함수를 손쉽게 만들어주기만 할뿐 위 코드와 동작은 동일합니다.
자 이제 아래에 '@' 를 이용해서 위 코드와 동일하게 구현해보겠습니다.

.. code:: python

    @a_new_decorator
    def a_function_requiring_decoration():
        """Hey you! Decorate me!"""
        print("I am the function which needs some decoration to "
              "remove my foul smell")

    a_function_requiring_decoration()
    #outputs: I am doing some boring work before executing a_function_requiring_decoration()
    #         I am the function which needs some decoration to remove my foul smell
    #         I am doing some boring work after executing a_function_requiring_decoration()

    # @a_new_decorator 는 단지 짧은 표현방법입니다.
    a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)

이제 여러분은 python에서 decorators 가 어떻게 동작하는지 이해가 되셨으리라 믿습니다.
현재 위 코드에는 한가지 문제점이 있습니다. 만약 아래와 같이 실행한다면 어떻게 될까요?

.. code:: python

    print(a_function_requiring_decoration.__name__)
    # Output: wrapTheFunction


위 결과는 예상했던 것과 다릅니다. 함수의 이름은 "a\_function\_requiring\_decoration" 이죠.
( 'Output: wrapTheFunction' 이 아닙니다 ) a\_function\_requiring\_decoration 함수는
wrapTheFunction 으로 바뀌었습니다. decorator 함수의 내용으로 모든 것이 
변경되었습니다. ( name, docstring ). 운이 좋게도 python에서는 이 문제를 해결할
간단한 solution(``functools.wraps``)을 제공합니다. ``functools.wraps`` 를 이용하여 
위 코드를 수정해보겠습니다.

.. code:: python

    from functools import wraps

    def a_new_decorator(a_func):
        @wraps(a_func)
        def wrapTheFunction():
            print("I am doing some boring work before executing a_func()")
            a_func()
            print("I am doing some boring work after executing a_func()")
        return wrapTheFunction

    @a_new_decorator
    def a_function_requiring_decoration():
        """Hey yo! Decorate me!"""
        print("I am the function which needs some decoration to "
              "remove my foul smell")

    print(a_function_requiring_decoration.__name__)
    # Output: a_function_requiring_decoration

자 이제 이전에 발생했던 문제가 해결되었습니다.
decorators 의 다양한 use-cases를 배우기 위해 다음으로 넘어가볼까요?

**Blueprint:**

.. code:: python

    from functools import wraps
    def decorator_name(f):
        @wraps(f)
        def decorated( *args, **kwargs):
            if not can_run:
                return "Function will not run"
            return f(*args, **kwargs)
        return decorated

    @decorator_name
    def func():
        print("Function is running")

    can_run = True
    print(func())
    # Output: Function is running

    can_run = False
    print(func())
    # Output: Function will not run

참고사항: ``@wraps`` 는 장식에 사용될 함수를 인자로 받은 후,
인자로 넘겨받은 함수의 name, docstring, arguments list, 기타 등등의 속성/기능들을
추가합니다. 이는 decorator 내부에서 이미 decorated 된 함수의 속성에 접근할 수 있도록 해줍니다.

Use-cases:
~~~~~~~~~~

이장에서는 decorators 가 무언가를 쉽게 관리할수 있는 사용법과, decorators가 정말로
멋지에 사용되는 부분을 살펴보겠습니다.

1. Authorization
^^^^^^^^^^^^^^^^

decorator 는 web application 의 사용자와의 접점에서 어떤 사용자가 
권한을 가지고 있는지 확인하는데 도움을 줍니다. decorator는 Flask 웹 프레임워크, 
Django 웹 프레임워크에서 널리 사용되고 있습니다.
아래는 authentication 에 사용되는 decorator 를 사용하는 예제입니다.

**Example :**

.. code:: python

    from functools import wraps

    def requires_auth(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            auth = request.authorization
            if not auth or not check_auth(auth.username, auth.password):
                authenticate()
            return f(*args, **kwargs)
        return decorated

2. Logging
^^^^^^^^^^

Logging은 decorators 가 아주 유용하게 사용되는 또 다른 영역입니다.
다음은 예제입니다.

.. code:: python

    from functools import wraps

    def logit(func):
        @wraps(func)
        def with_logging(*args, **kwargs):
            print(func.__name__ + " was called")
            return func(*args, **kwargs)
        return with_logging

    @logit
    def addition_func(x):
       """Do some math."""
       return x + x


    result = addition_func(4)
    # Output: addition_func was called

이제 여러분은 decorators 를 현명하게 사용하는 방법에 대해서 고민하고 있을거라 생각합니다.
