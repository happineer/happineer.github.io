Targeting Python 2+3
--------------------

다양한 case에서 여러분은 python2+ 와 python3+ 에서 모두 잘 동작하는
programs 을 개발하고 싶을 것입니다.

여러분은 아주 유명한 수백명의 사람들이 사용하는 모듈을 가지고 있다고 상상해 보세요
그러나 이 모든 사람들이 python2 또는 python3 를 사용하진 않습니다.
이러한 경우에 여러분은 2가지를 선택할 수 있습니다.
첫번째는 2개의 모듈을 배포하는 것입니다. 하나는 python2, 다른 하나는 python3.
다른 방법은 여러분의 코드가 python2, python3 모두 호환되도록 수정하는 것입니다.

이번 장에서는 여러분의 script 가 python2, 3 에서 호환되도록 만들때 활용할 수 있는
몇가지 trick 을 강조할 것입니다.

**Future imports**

먼저, 가장 중요한 방법은 ``__future__`` imports 를 사용하는 것입니다.
이것은 여러분이 python2 에서 python3 기능을 import 할 수 있도록 해줍니다.
아래 예제가 있습니다.

-  Context managers 은 python 2.6+ 에서 처음 등장했습니다. python2.5 에서 이를 사용하기 위해서는
   아래와 같이 하면 됩니다.

.. code:: python

    from __future__ import with_statement


-  ``print`` 함수

``print`` 는 python3 함수로 변경되었습니다. 만약 여러분이 python2 에서
사용하고자 한다면 ``__future__`` 로부터 import 할수 있습니다.

.. code:: python

    print
    # Output:

    from __future__ import print_function
    print(print)
    # Output: <built-in function print>

**module rename 하는방법**

여러분의 script 에서 어떻게 packages 를 import 하는지 말해주세요.
우리 대부분은 아래와 같이 합니다.

.. code:: python

    import foo
    # or
    from foo import bar

여러분도 무언가를 이렇게 할 수 있다는것 을 알고 있나요?

.. code:: python

    import foo as foo

이것의(as를 사용한 것) 기능은 위에서 봤던 코드의 기능과 동일하다는 것을 알고 있습니다. 하지만
이것은(rename module) 여러분의 스크립트가 python2, 3 과 호환되도록 하는데 꼭 필요한 요소입니다.
아래의 코드를 살펴보겠습니다.

.. code:: python

    try:
        import urllib.request as urllib_request  # for Python 3
    except ImportError:
        import urllib2 as urllib_request  # for Python 2


그래서, 위 code 를 약간 설명해보겠습니다. 우리는 import 구문을 try,except 절로
감쌌습니다. 우리가 이렇게 한 이유는 python2 에서는 ``urllib.request`` 모듈이 없어서
그 결과 ImportError 를 발생시키기 때문입니다. ``urllib.request`` 의 기능은 python2에서는
``urllib2`` 모듈이 제공합니다. 그래서 python2 에서 ``urllib.request`` import를 시도하고
``ImportError`` 를 만나면 python 에게 ``urllib2`` 를 대신 import하라고 하는 것입니다.

마지막으로 여러분은 ``as`` 키워드에 대해서 알아야 합니다.
이것은 import 된 모듈을 ``urllib_request`` 로 mapping 을 합니다.
그래서 이제 ``urllib2`` 의 모든 클래스와 메서드는 ``urllib_request`` 를 통해
이용할 수 있습니다.


**구식의 python2 builtins**

기억해야 할 또다른 것은 python3 에서 삭제된 12개의 python2 builtin 입니다.
여러분은 python3 와의 호환되는 코드를 만들기 위해서는 python2 에서
해당 builtin 을 사용하면 안됩니다. 여러분이 12개의 python2 builtin을 
사용하지 않도록 강제화 하는 방법이 있습니다.


.. code:: python

    from future.builtins.disabled import *


이제 여러분이 python3 에서 제거된 모듈을 사용하려고 시도하면,
python은 아래와 같이 NameError 를 발생시킬 것입니다.

.. code:: python

    from future.builtins.disabled import *

    apply()
    # Output: NameError: obsolete Python 2 builtin apply is disabled

**External standard-library backports**

python2 에서 python3 의 기능을 제공하는 몇개의 package들이 있습니다.
예를 들면 아래와 같습니다.

-  enum ``pip install enum34``
-  singledispatch ``pip install singledispatch``
-  pathlib ``pip install pathlib``

더 읽을거리를 제공하자면, python 문서 `comprehensive guide
<https://docs.python.org/3/howto/pyporting.html>`_ 여러분의 코드가 
python2, python3 와 호환되도록 작성하기 위해 꼭 읽어봐야 하는 문서입니다.

