Context managers
----------------

Context manager는 여러분이 자원을 정확하게 할당/해제를 하고자 할때 도와줍니다.
context manager의 대부분의 사용 예제는 ``with`` 문 입니다. 여러분이 코드의
한 블록 안에서 쌍으로 실행하고자 하는 2개의 연관있는 operation을 가지고 
있다고 해봅시다. Context manager는 당신이 그것을 실수없이(정확하게)
할 수 있도록 해줍니다. 예제:

.. code:: python

    with open('some_file', 'w') as opened_file:
        opened_file.write('Hola!')

위 code는 파일을 open 하고, 임의의 data를 file에 쓰고 close합니다.
만약 data를 파일에 쓰는중에 error가 발생한다면 file close 를 시도하게 됩니다.
위 코드는 아래 코드와 동일합니다.

.. code:: python

    file = open('some_file', 'w')
    try:
        file.write('Hola!')
    finally:
        file.close()

이전 코드와 비교를 해보면, ``with`` 문을 사용함으로써
많은 boilerplate code가 제거된 것을 알 수 있습니다. ``with`` 문을
사용했을 때의 최대 장점은 우리가 아무런 신경을 쓰지 않아도 
nested 블럭안에서 나갈 때에는 작업 중인 file 이 반드시 close 된다는 점입니다.

Context manager 의 일반적인 사용법은 자원의 lock/unlock 그리고 open된
파일을 closing 해주는 것입니다. (이미 앞에서 살펴봤습니다)

이제 우리의 context manager를 구현하는 방법에 대해서 알아보겠습니다.
이것은 뒷 단에서 어떻게 동작하는지 이해할 수 있도록 해줍니다.

Implementing Context Manager as a Class:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

At the very least a context manager has an ``__enter__`` and
``__exit__`` methods defined. Let's make our own file opening Context
Manager and learn the basics.

context manager 는 최소한 ``__enter__`` 그리고 ``__exit__``
Method를 가지고 있어야 합니다. 자 이제 context manager을 open한 우리의 file을
생성해 보겠습니다. 그리고 원리를 배워봅시다.

.. code:: python

    class File(object):
        def __init__(self, file_name, method):
            self.file_obj = open(file_name, method)
        def __enter__(self):
            return self.file_obj
        def __exit__(self, type, value, traceback):
            self.file_obj.close()

단순히 ``__enger__`` , ``__exit__`` method를 정의하고, 우리는
``with`` 구문에서 사용하기만 하면 됩니다. 해볼까요?

.. code:: python

    with File('demo.txt', 'w') as opened_file:
        opened_file.write('Hola!')

우리가 생성한 ``__exit__`` 함수는 3개의 인자를 갖습니다.
3개의 인자는 context manager 클래스를 구성하는 모든 ``__exit__`` 함수에서
필수입니다. 자 이제 내부적으로 어떤 일이 벌어졌는지 알아볼까요?


1. ``with`` 구문은 ``File`` 클래스의 ``__exit__`` method 를저장한다.
2. ``File`` 클래스의 ``__enter__`` method 를 호출한다.
3. ``__enter__`` method 는 file 을 열고, 그것을 return 한다.
4. open 된 파일의 참조(handle)는 ``opened_file`` 에게 전달된다.
5. ``.write()`` 를 이용해서 파일에 write 한다.
6. ``with`` 구문은 저장되어 있는 ``__exit__`` method 를 호출한다.
7. ``__exit__`` method 는 파일을 close 한다.


Handling exceptions
^^^^^^^^^^^^^^^^^^^

우리는 ``__exit__`` method 와 ``type``, ``value`` and ``traceback`` 인자에 대해서
아직 논의하지 않았다. 위 단계에서 4단계와 6단계 사이에 exception이 발생한다면
python 은 exception의 type, value 그리고 traceback 을 ``__exit__`` method에 전달한다.
이는 ``__exit__`` method 가 어떻게 파일을 close 할 것인지, 그리고 추가로
해야 할 작업은 없는지 결정하도록 한다. 위에서 다뤘던 경우에는
이런 것들에 대해서 전혀 신경 쓸 필요가 없다.


file 객체가 exception 을 발생시키면 무슨 일이 일어날까요?
우리는 file 객체에서 제공하지 않는 method 의 접근을 시도할 것입니다.
예를 들면 아래와 같습니다.

.. code:: python

    with File('demo.txt', 'w') as opened_file:
        opened_file.undefined_function('Hola!')

Error 를 만났을 때, ``with`` 구문에 의해 수행되는 절차를 아래에 나열해 봅시다

1. error 에 대한 type, value 그리고 traceback을 ``__exit__`` method의 인자로 전달합니다.
2. 이것은 ``__exit__`` method 가 exception을 처리하도록 합니다.
3. 만약 ``__exit__`` method 가 True를 return 하면, exception은
훌륭하게 처리가 된 것입니다.
4. 만약 True가 아닌 무언가가 ``__exit__`` method 로부터 return 되었다면
exception 은 ``with`` 구문에 의해서 발생한 것입니다.

이번 case에서 ``__exit__`` method 가 ``None`` (return 구문이 없을 경우,
method 는 ``None`` 을 return 합니다) 을 return 하였습니다.
그래서 ``with`` 구문이 exception을 발생시켰다는 것을 알 수 있습니다.

.. code:: python

    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    AttributeError: 'file' object has no attribute 'undefined_function'

``__exit__`` method 안에서 exception을 처리해봅시다.

.. code:: python

    class File(object):
        def __init__(self, file_name, method):
            self.file_obj = open(file_name, method)
        def __enter__(self):
            return self.file_obj
        def __exit__(self, type, value, traceback):
            print "Exception has been handled"
            self.file_obj.close()
            return True

    with File('demo.txt', 'w') as opened_file:
        opened_file.undefined_function()

    # Output: Exception has been handled

``__exit__`` method 가 True 를 return 하였습니다. 그래서 ``with`` 구문에서
발생시킨 exception은 없습니다.

이것은 context managers를 구현하는 유일한 방법이 아닙니다.
다른 방법이 있습니다. 우리는 다음장에서 이것에 대해 알아보겠습니다.

Implementing a Context Manager as a Generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

우리는 decorators 와 generators 를 이용하여 context manager를 구현할 수 있습니다.
python 은 이러한 목적으로 contextlib모듈을 가지고 있습니다. class 대신에 우리는
generator 함수를 이용해서 context manager를 구현 할 수 있습니다.
기본 적인 내용을 알아봅시다.

.. code:: python

    from contextlib import contextmanager

    @contextmanager
    def open_file(name):
        f = open(name, 'w')
        yield f
        f.close()

맞습니다. context manager를 구현하는 이 방법은 더 직관적이고 쉽습니다.
그러나 이렇게 구현하기 위해서는 generators, yeild 그리고 decorators 에 대해서
지식이 필요합니다. 이번 예제에서는 우리는 임의의 어떤 exception 도 처리하지 않습니다.
대부분은 앞에서 살펴본 method 와 동일한 방법으로 작동합니다.

이 method를 조금 들여다 보겠습니다.

1. Python은 ``yield`` 키워드를 만납니다. 그래서, 일반 함수가 아닌
generator 를 만들게 됩니다.
2. Decoration 때문에 open\_file 이라는 함수를 인자로 하는 contextmanager 가
호출 됩니다.
3. ``contextmanager`` 함수는 ``GeneratorContextManager`` 객체로 wrapping된
generator 를 return 합니다.
4. ``GeneratorContextManager`` 는 ``open_file`` 에 함수에 할당됩니다.
그래서 우리가 ``open_file`` 함수를 호출하면, 우리는 실제로
``GeneratorContextManager`` object 를 호출하는 것입니다.


지금까지 이것에 대해서 다 알아봤다.
이제 우리는 새롭게 생성된 ContextManager 를 아래와 같이 사용할 수 있다.

.. code:: python

    with open_file('some_file') as f:
        f.write('hola!')

